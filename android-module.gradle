assert project.ext.properties.containsKey('androidProjectType')
assert rootProject.ext.properties.containsKey('compileSdkVersion')
assert rootProject.ext.properties.containsKey('buildToolsVersion')
assert rootProject.ext.properties.containsKey('minSdkVersion')
assert rootProject.ext.properties.containsKey('targetSdkVersion')
assert rootProject.ext.properties.containsKey('versionCode')
assert rootProject.ext.properties.containsKey('versionName')

ext {
    isApplicationProject = (androidProjectType == 'application')
}

if (isApplicationProject) {
    assert rootProject.ext.properties.containsKey('keyStoreFile')
    assert rootProject.ext.properties.containsKey('keyStorePassword')
    assert rootProject.ext.properties.containsKey('keyPassword')
}

assert rootProject.ext.properties.containsKey('androidBuildToolsPluginVersion')
assert rootProject.ext.properties.containsKey('androidAptPluginVersion')
assert rootProject.ext.properties.containsKey('sdkManagerPluginDep') || rootProject.ext.properties.containsKey('sdkManagerPluginVersion')

apply plugin: "android-sdk-manager"
apply plugin: "com.android.$project.androidProjectType"
apply from: "$rootProject.projectDir/gradle-scripts/retrolambda.gradle"
apply from: "$rootProject.projectDir/gradle-scripts/android-apt.gradle"
apply from: "$rootProject.projectDir/gradle-scripts/android-unit-tests.gradle"

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    signingConfigs {
        release {
            keyAlias project.name
            storeFile file(rootProject.keyStoreFile)
            storePassword rootProject.keyStorePassword
            keyPassword rootProject.keyPassword
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled isApplicationProject
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            if (isApplicationProject) {
                signingConfig signingConfigs.release
            }
        }
    }
}

def getLocalProperties() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties
}

repositories {
    maven {
        url "${getLocalProperties().getProperty('sdk.dir')}/extras/android/m2repository/"
    }
}
